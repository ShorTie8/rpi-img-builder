download () {
echo
echo Downloading kernel.
wget -cq --show-progress https://github.com/raspberrypi/linux/archive/rpi-${VERSION}.tar.gz
echo Done.
}

extract () {
echo
echo Extracting archive.
tar -xf rpi-${VERSION}.tar.gz
#rm -f rpi-${VERSION}.tar.gz #remove
echo Done.
}

menuconfig () {
    echo
    echo Opening menuconfig.
    sleep 1s
    make menuconfig
}

# armv7l
armv7_setup () {
cd ${KERNEL}-${VERSION}
export ARCH=arm
KERNEL=kernel7l
#make clean
#make mrproper
}

edgev7_setup () {
cd ${KERNEL}-${VERSION}
export ARCH=arm
KERNEL=kernel7l
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PAT}/builddeb scripts/package/
cp -R ../${PAT}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
#make clean
#make mrproper
}

armv7_cconfig () {
    echo Making ${MYCONFIG}.
    cp -f ../${DEF}/${MYCONFIG} arch/arm/configs/
    make ARCH=arm ${MYCONFIG}
    echo Done.
}

armv7_ccompile () {
    echo -- CC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg
}

armv7_ncompile () {
    echo -- NC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm bindeb-pkg
}

# aarch64
armv8_setup () {
cd ${KERNEL}-${VERSION}
export ARCH=arm64
#make clean
#make mrproper
}

edgev8_setup () {
cd ${KERNEL}-${VERSION}
export ARCH=arm64
rm -f scripts/package/builddeb
rm -f scripts/package/mkdebian
cp -R ../${PAT}/builddeb scripts/package/
cp -R ../${PAT}/mkdebian scripts/package/
chmod +x scripts/package/builddeb
chmod +x scripts/package/mkdebian
#make clean
#make mrproper
}

armv8_cconfig () {
    echo Making ${MYCONFIG}.
    cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
    make ARCH=arm64 ${MYCONFIG}
    echo Done.
}

armv8_ccompile () {
    echo -- CC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
}

armv8_ncompile () {
    echo -- NC
    echo --- Building deb packages.
    make -j${CORES} ARCH=arm64 bindeb-pkg
}

armv7_setup (){
case `grep -Fx "edge=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    edgev7_setup
    ;;
  1)
    armv7_setup
    ;;
esac
}

armv8_setup (){
case `grep -Fx "edge=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    edgev8_setup
    ;;
  1)
    armv8_setup
    ;;
esac
}

armv7_patching (){
case `grep -Fx "crosscompile=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_ccpatch
    ;;
  1)
    armv7_ncpatch
    ;;
esac
}

armv8_patching (){
case `grep -Fx "crosscompile=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv8_ccpatch
    ;;
  1)
    armv8_ncpatch
    ;;
esac
}

armv7_defconfig (){
case `grep -Fx "custom_defconfig=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_cconfig
    ;;
  1)
    armv7_fconfig
    ;;
esac
}

armv8_defconfig (){
case `grep -Fx "custom_defconfig=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv8_cconfig
    ;;
  1)
    armv8_fconfig
    ;;
esac
}

armv7_builddeb (){
case `grep -Fx "crosscompile=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv7_ccompile
    ;;
  1)
    armv7_ncompile
    ;;
esac
}

armv8_builddeb (){
case `grep -Fx "crosscompile=1" "../userdata.txt" >/dev/null; echo $?` in
  0)
    armv8_ccompile
    ;;
  1)
    armv8_ncompile
    ;;
esac
}