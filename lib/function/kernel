source_dir(){
mkdir -p ${SRC}
cp -f soc.txt ${SRC}/
cd ${SRC}
}

clean_source(){
if ls ${KERNEL}-${VERSION} > /dev/null 2>&1;
	then echo "" && echo -e "${PNK}Cleaning${FIN} ..." && rm -fdr ${KERNEL}-${VERSION};
fi
}

download(){
echo
echo_kernel
if ls ${KERNEL}-${VERSION}.tar.gz > /dev/null 2>&1;
	then echo -e "${YLW}${KERNEL}-${VERSION}.tar.gz found${FIN}.";
	else aria2c -c --download-result=hide --console-log-level=error --disable-ipv6=true --summary-interval=0 --show-files=false https://github.com/raspberrypi/linux/archive/rpi-${VERSION}.tar.gz && echo_bdone;
fi
if `grep -Fx "rtl8812au=1" "../userdata.txt" >/dev/null;`
	then rtl8812au_download;
fi
if `grep -Fx "rtl88x2bu=1" "../userdata.txt" >/dev/null;`
	then rtl88x2bu_download;
fi
if `grep -Fx "rtl8811cu=1" "../userdata.txt" >/dev/null;`
	then rtl8811cu_download;
fi
}

extract(){
echo
echo_extract
echo -e -n "${WHT}"
pv ${KERNEL}-${VERSION}.tar.gz | tar -xzf - -C .
echo -e -n "${FIN}"
}

# aarch64
armv8_setup(){
if `grep -Fx "rtl8812au=1" "../userdata.txt" >/dev/null;`
	then rtl8812au;
fi
if `grep -Fx "rtl88x2bu=1" "../userdata.txt" >/dev/null;`
	then rtl88x2bu;
fi
if `grep -Fx "rtl8811cu=1" "../userdata.txt" >/dev/null;`
	then rtl8811cu;
fi
cd ${KERNEL}-${VERSION}
export ARCH=arm64
#make clean
#make mrproper
}

userpatches(){
if
ls ../${UP}/*.patch > /dev/null 2>&1;
then echo -e "${GRN}Applying user patches${FIN}." &&
for i in ../${UP}/*.patch; do patch -p1 < $i; done ;
else echo -e "${YLW}No user patches found${FIN}." 
fi
}

armv8_cconfig(){
    echo_cconfig
    cp -f ../${DEF}/${MYCONFIG} arch/arm64/configs/
    make ARCH=arm64 ${MYCONFIG}
    echo_done
}

armv8_menuconfig(){
    echo
    echo_menuconfig
    sleep 1s
    make menuconfig
}

armv8_ccompile(){
    echo -e "-- ${GRN}CC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- bindeb-pkg
}

armv8_ncompile(){
    echo -e "-- ${GRN}NC${FIN}"
    echo_build
    echo 'y' | make -j${CORES} ARCH=arm64 bindeb-pkg
}

noinitrd(){
sed -i 's/export INITRD=$want_initrd/export INITRD=No/g' scripts/package/builddeb
sed -i 's/export INITRD=$(if_enabled_echo CONFIG_BLK_DEV_INITRD Yes No)/export INITRD=No/g' scripts/package/builddeb
}

remove_v8(){
sed -i 's/CONFIG_LOCALVERSION="-v8"/# CONFIG_LOCALVERSION=""/g' arch/arm64/configs/bcm2711_defconfig
}

choose_initrd(){
if `grep -Fx "uboot=0" "../../userdata.txt" >/dev/null;`
	then noinitrd; else echo -e "${YLW}Initrd enabled${FIN}." && remove_v8;
fi
}

ccpatch(){
    echo
    echo_ccpatch
    userpatches
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
    if `grep -Fx "bcm2711" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${CC}/rpi4b-packaging.patch;
    fi
    cp -f ../${PAT}/headers-byteshift.patch headers-byteshift.patch
    choose_initrd
    echo_done
    echo
}

ncpatch(){
    echo
    echo_ncpatch
    userpatches
    rm -f scripts/package/builddeb
    rm -f scripts/package/mkdebian
    cp -R ../${PAT}/builddeb scripts/package/
    cp -R ../${PAT}/mkdebian scripts/package/
    chmod +x scripts/package/builddeb
    chmod +x scripts/package/mkdebian
    if `grep -Fx "bcm2711" "../../soc.txt" >/dev/null;`
	then patch -p1 < ../${NC}/rpi4b-packaging.patch;
    fi
    choose_initrd
    echo_done
    echo
}

rpi4_fconfig(){
    echo -e "${RED}Making bcm2711 defconfig${FIN}."
    module_sig
    rtl8812au_module
    rtl88x2bu_module
    rtl8811cu_module
    make ARCH=arm64 bcm2711_defconfig &> /dev/null
    echo_done
}

choose_rpi4_defconfig(){
case `grep -Fx "custom_defconfig=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv8_cconfig
    ;;
  1)
    rpi4_fconfig
    ;;
esac
}

choose_v8_menuconfig(){
if `grep -Fx "menuconfig=1" "../../userdata.txt" >/dev/null;`
    then armv8_menuconfig
fi
}

choose_v8_compile(){
case `grep -Fx "crosscompile=1" "../../userdata.txt" >/dev/null; echo $?` in
  0)
    armv8_ccompile
    ;;
  1)
    armv8_ncompile
    ;;
esac
}
